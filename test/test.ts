/* eslint-disable @typescript-eslint/no-inferrable-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable prettier/prettier */
// eslint-disable-next-line prettier/prettier
import { ethers } from "hardhat";
import * as dotenv from "dotenv";
import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers";
import { expect } from "chai";

// import { use, POSClient } from "@maticnetwork/maticjs";
// import { Web3ClientPlugin } from "@maticnetwork/maticjs-web3";
// import HDWalletProvider from "@truffle/hdwallet-provider";
import config  from "../config/config.json";

dotenv.config();

// use(Web3ClientPlugin);

describe("Multichain Test", function () {

    let account1: SignerWithAddress;
    const etherURL = `https://eth-mainnet.alchemyapi.io/v2/${process.env.ALCHEMY_KEY}`
    const mumbai = `https://matic-testnet-archive-rpc.bwarelabs.com`

    let Contract
    let Factory

    beforeEach(async function () {
        await ethers.provider.send(
            "hardhat_reset",
            [
                {
                    forking: {
                        jsonRpcUrl: etherURL,
                        // blockNumber: 15611047
                    },
                },
            ],
        );

        Factory = await ethers.getContractFactory('LiteMainBridge')
        Contract = await Factory.deploy()
    });

    it("Multichain testing", async function () {
        // let provider = new ethers.providers.JsonRpcProvider(etherURL)
        // const signer = new ethers.Wallet(
        //     process.env.PRIVATE_KEY as string,
        //     provider
        // );

        let fxRoot = config.testnet.fxRoot.address;
        let checkpointManager = config.testnet.checkpointManager.address;
        let fxERC20 = config.testnet.fxERC20.address;
        let rootchainManager = config.testnet.fxRootChainManager.address;
        let predicateETH = config.testnet.ETHPredicate.address
        let WETH = "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"

        let tx = await Contract.init(checkpointManager, fxRoot, rootchainManager, predicateETH, WETH)
        await tx.wait()

        const re = await Contract.test("0xf909c0842f8e1280b9010019fc1679cac635a735ac23579347ae769134e11e00dd608a47ed84e50273eaf5f45f8f2741661c70fa00f53d84d5d6829f804f7fa36b916141e5a08a9f02ed348d050a85e851b9a5935db4af7aa801a63a879dd0119c7b39550ef9d0c1a6701715e77fba31f978b4bee6bcd3983dc7f64c72b18c5878ca637113c1cd6c7fc15228a94b26bfc2bd4df371f87683ae1ce83d84aea4da0dfd038a27d176cd83302c5b504f2f41ce29d2aa9746d810f33e15efe76c53bc6cb46f6b0f8ce4e5d88feb3abc5fd9c56f673ea88250c4d096a58369a6c300edf6c75a6232bf41cd4c7308a11062ffacaaa88e5ce1d6e4f9c6d265a7026d84b563aee9e70dba60225c2d4a8401b9ff6d84636455e8a034a8b6eedd59e9801bfaf1cfbe0c44eb91bf18c76cd87458522b9bd06a5e1acea030d75aac69c9bd0ab9b1c6cd6bf1b23b6b27bafb64cd0097335486b22c0b57d4b9038902f9038501833058d5bf9027af89b94a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aaf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000087e66743fa7eccc881a660cb3ea555e5c2801773a0000000000000000000000000202e5edf27d639c62b35746ea95e9ac06858b5eaa000000000000000000000000000000000000000000000000000265e8af3930000f89b94a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aaf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000202e5edf27d639c62b35746ea95e9ac06858b5eaa00000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000265e8af3930000f9013d940000000000000000000000000000000000001010f884a04dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63a00000000000000000000000000000000000000000000000000000000000001010a0000000000000000000000000027814f84608eddbaae145778a55651079e2b52da00000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484b8a000000000000000000000000000000000000000000000000000007c9258fc500000000000000000000000000000000000000000000000000016085cb099b59dcb000000000000000000000000000000000000000000000000043733a2f0e0fe9d0000000000000000000000000000000000000000000000001607e01e40b94dcb0000000000000000000000000000000000000000000000000437b03549dd4e9db904d9f904d6f871a06dfad0c8b2f5396aa3020aef97020c8a1392643c97bf80172ea1070d97cd27a4a0299a0aabdc69127617c59222e94499c699f5d260821ebdab170bd84facf84aca808080808080a03230f2656701dd0cc5a4eeb21e2e90799fdd941f281451a01724264cdc3c3d3b8080808080808080f8d1a0f962628b7ef37c5d200ba72d9797d1f4d271819a42d1c61905f55dbd0a52f8b4a0c503cc952a2fc587a34dd4c2dbd1412ff67fa1cbd404d2e31a56017aee933cffa04de61e1b7a9c1f66c76cbd1962758cf917aff0240896342b7b93db8021b1edb7a01b74749f0db5f0802309a8786b5a50144841cb87bba8e7dede6ddd68045d5cd9a0e0db8dcd8d7ac48d49e2afe29907f769646d2520de47c16c0109ff841b667d58a00d0c515d3b9124ad0160a7aa09e5e6b531aaee83a7b068c03e17df6fe5cabda48080808080808080808080f9038d20b9038902f9038501833058d5bf9027af89b94a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aaf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000087e66743fa7eccc881a660cb3ea555e5c2801773a0000000000000000000000000202e5edf27d639c62b35746ea95e9ac06858b5eaa000000000000000000000000000000000000000000000000000265e8af3930000f89b94a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aaf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000202e5edf27d639c62b35746ea95e9ac06858b5eaa00000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000265e8af3930000f9013d940000000000000000000000000000000000001010f884a04dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63a00000000000000000000000000000000000000000000000000000000000001010a0000000000000000000000000027814f84608eddbaae145778a55651079e2b52da00000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484b8a000000000000000000000000000000000000000000000000000007c9258fc500000000000000000000000000000000000000000000000000016085cb099b59dcb000000000000000000000000000000000000000000000000043733a2f0e0fe9d0000000000000000000000000000000000000000000000001607e01e40b94dcb0000000000000000000000000000000000000000000000000437b03549dd4e9d82001501");
        // let re = await Contract.fxRoot();
        console.log("---------------------",re)



        // const posClient = new POSClient();
        // await posClient.init({
        //     network: 'testnet',
        //     version: 'mumbai',
        //     parent: {
        //         provider: new HDWalletProvider(process.env.PRIVATE_KEY as string, etherURL),
        //         defaultConfig: {
        //             from: process.env.USER_ADDRESS as string
        //         }
        //     },
        //     child: {
        //         provider: new HDWalletProvider(process.env.PRIVATE_KEY as string, mumbai),
        //         defaultConfig: {
        //             from: process.env.USER_ADDRESS as string
        //         }
        //     },
        // });

        // const tx = "0x74cddb247a2d1be7141932996ebc91999e4c53619c0d69b28829acee7b5bccf3"
        // const sig = "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"

        // const proof = await posClient.exitUtil.buildPayloadForExit( tx, sig, false )
        // console.log(proof)
    });
});